name: Build stable bundles

on:
  push:
    branches:
    - '*'
    tags:
    - '*'

jobs:
  build_applications:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [macos-11, ubuntu-18.04, windows-2019]
        os: [macos-11, windows-2019]
    steps:

    # osx signing based on https://melatonin.dev/blog/how-to-code-sign-and-notarize-macos-audio-plugins-in-ci/

    - name: Import Developer ID Application Certificate
      if: ${{ matrix.os == 'macos-11' }}
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Import Mac Installer Distribution Certificate
      if: ${{ matrix.os == 'macos-11' }}
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.MAC_INST_DIST_CERT }}
        p12-password: ${{ secrets.MAC_INST_DIST_PASSWORD }}
        create-keychain: false
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Checkout code
      uses: actions/checkout@v2

    # Not all dependencies work correctly on Python 3.9 on Windows yet so we use
    # Python 3.8 there.
    - name: Set up Python 3.8
      if: matrix.os == 'windows-2019'
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set up Python 3.9
      if: matrix.os != 'windows-2019'
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install development version of pyinstaller
      if: ${{ matrix.os == 'macos-11' }}
      run: PYINSTALLER_COMPILE_BOOTLOADER=1 pip install git+https://github.com/rokm/pyinstaller.git@let-there-be-symlinks-final

    - name: Install development version of pyinstaller
      if: ${{ matrix.os != 'macos-11' }}
      run: pip install git+https://github.com/pyinstaller/pyinstaller.git

    - name: Install Python dependencies
      run: pip install -r requirements.txt
    - name: Run pyinstaller
      run: pyinstaller glue_app.spec
    - name: Uninstall lxml
      run: pip uninstall -y lxml

    - name: Prepare application for distribution
      if: ${{ matrix.os != 'macos-11' }}
      shell: bash
      run: ./prepare_"$RUNNER_OS".sh ${GITHUB_REF##*/}

    - name: Remove nested app
      if: ${{ matrix.os == 'macos-11' }}
      run: rm -rf dist/glue.app/Contents/Frameworks/PyQt5/Qt/lib/QtWebEngineCore.framework/Versions/5/Helpers/QtWebEngineProcess.app
    - name: Rename MacOS X application
      if: ${{ matrix.os == 'macos-11' }}
      run: mv dist/glue.app dist/"glue ${GITHUB_REF##*/}.app"

    # Build signed DMG for direct distribution

    - name: Remove start_glue
      if: ${{ matrix.os == 'macos-11' }}
      run: rm -rf dist/start_glue
    - name: Codesign MacOS X application
      if: ${{ matrix.os == 'macos-11' }}
      run: codesign --entitlements entitlements.plist --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v dist/"glue ${GITHUB_REF##*/}.app" --deep --strict --options=runtime --timestamp
    - name: Make DMG
      if: ${{ matrix.os == 'macos-11' }}
      run: hdiutil create -volname "Glue" -srcfolder dist -ov -format UDZO dist/"glue ${GITHUB_REF##*/}.dmg"
    - name: Notarize app
      if: ${{ matrix.os == 'macos-11' }}
      run: xcrun notarytool submit dist/"glue ${GITHUB_REF##*/}.dmg" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --team-id ${{ secrets.TEAM_ID }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --wait
    - name: Staple notarization to dmg
      if: ${{ matrix.os == 'macos-11' }}
      run: xcrun stapler staple dist/"glue ${GITHUB_REF##*/}.dmg"

    # Build signed pkg for potential Mac App Store distribution

    - name: Build MacOS X installer for distribution
      if: ${{ matrix.os == 'macos-11' }}
      run: productbuild --component dist/"glue ${GITHUB_REF##*/}.app" dist/"glue ${GITHUB_REF##*/}_unsigned.pkg"
    - name: Sign MacOS X installer for distribution
      if: ${{ matrix.os == 'macos-11' }}
      run: productsign --sign "${{ secrets.MAC_INSTALLER_DISTRIBUTION}}" dist/"glue ${GITHUB_REF##*/}_unsigned.pkg" dist/"glue ${GITHUB_REF##*/}.pkg"
    - name: Remove unsigned pkg
      if: ${{ matrix.os == 'macos-11' }}
      run: rm -rf dist/"glue ${GITHUB_REF##*/}_unsigned.pkg"

    - name: Remove .app
      if: ${{ matrix.os == 'macos-11' }}
      run: rm -rf dist/"glue ${GITHUB_REF##*/}.app"

    - name: Output list of included packages
      if: matrix.os == 'ubuntu-18.04'
      run: pip freeze > included-packages.txt
    - name: Install awscli
      run: pip install awscli
    - name: Upload glue to S3
      shell: bash
      if: github.event_name != 'pull_request'
      run: aws s3 cp glue* s3://glueviz/installers/${GITHUB_REF##*/}/
      working-directory: dist
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Upload package list to S3
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-18.04'
      run: aws s3 cp included-packages.txt s3://glueviz/installers/${GITHUB_REF##*/}/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
